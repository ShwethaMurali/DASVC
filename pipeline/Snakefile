shell.prefix("source config.sh;")

configfile: "config.json"

import os
import glob
import csv

TN=config["target_names_file"]
REGIONS=[line.rstrip('\n') for line in open(config["target_names_file"])]


TMPDIR = config["tmp_dir"]
LZ     = config["lastz_bin"]
SV     = config["contigsv_bin"]
POST   = config["lastz_settings"]

TARGET  = config["target_path"] + config["target_name"]
TARGETI = TARGET + ".fai"
QUERY   = config["query_path"] + config["query_name"]
QUERYI  = QUERY + ".fai"

LQ=config["local_path"] + config["query_name"]

RS_LT= "mkdir -p %s ; rsync  --ignore-existing --bwlimit=50000 -v %s %s" % (config["local_path"], TARGET, config["local_path"])
RS_LTI="mkdir -p %s ; rsync  --ignore-existing --bwlimit=50000 -v %s %s" % (config["local_path"], TARGETI, config["local_path"])
RS_LQ= "mkdir -p %s ; rsync  --ignore-existing --bwlimit=50000 -v %s %s" % (config["local_path"], QUERY, config["local_path"])
RS_LQI="mkdir -p %s ; rsync  --ignore-existing --bwlimit=50000 -v %s %s" % (config["local_path"], QUERYI, config["local_path"])

FAIDX="samtools faidx %s%s" % (config["local_path"], config["target_name"])

rule filterSVcov:
     message: "INFO: removing low coverage windows"
     input  : SV="raw_sv_calls/calls.sort.bed", COV="coverage_stats/target_windows.cov.lc.bed"
     output : "filtered_sv_calls/filt.calls.bed"
     params : sge_opts=config["cluster_settings"]["light"]
     shell  : "bedtools subtract -A -a {input.SV} -b {input.COV} > {output}"

rule getBad :
     message: "INFO: finding low coverage windows"
     input  : "coverage_stats/target_windows.cov.bed"
     output : "coverage_stats/target_windows.cov.lc.bed"
     params : sge_opts=config["cluster_settings"]["light"]
     shell  : " awk ' $7 < 0.5 {{print}} ' {input} > {output}"

rule getCoverage:
     message: "INFO: getting window coverage"
     input  : BAM="all_final_bam/final.sort.bam", INDEX="all_final_bam/final.sort.bam.bai", WIN="coverage_stats/target_windows.bed"
     output : "coverage_stats/target_windows.cov.bed"
     params : sge_opts=config["cluster_settings"]["heavy"]
     shell  : "bedtools coverage -abam {input.BAM} -b {input.WIN} > {output}"

rule makeWindows:
     message: "INFO: building windows across target"
     input  : TAFI={TARGETI}
     output : temp("coverage_stats/target_windows.bed")
     params : sge_opts=config["cluster_settings"]["light"], WS=config["window_size"]
     shell: "bedtools makewindows -g {input} -w {params.WS} -s {params.WS} > {output} "

rule varSort:
     message : "INFO: sorting variant calls"
     input:  "raw_sv_calls/calls.bed"
     output: "raw_sv_calls/calls.sort.bed"
     params: sge_opts=config["cluster_settings"]["heavy"]
     shell:  "bedtools sort -i {input} > {output}"

rule call:
     message : "INFO: calling variants"
     input: BAM="all_final_bam/final.sort.bam", BI="all_final_bam/final.sort.bam.bai", TF={TARGET}, QU={QUERY}, BIN={SV}
     output: temp("raw_sv_calls/calls.bed")
     params: sge_opts=config["cluster_settings"]["light"]
     shell: "{input.BIN} varcall {input.BAM} {input.TF} {input.QU} > {output}"

rule index:
     message : "INFO: indexing annoated and target-position sorted bam"
     input : "all_final_bam/final.sort.bam"
     output: "all_final_bam/final.sort.bam.bai"
     params: sge_opts=config["cluster_settings"]["light"]
     shell : "samtools index {input}"

rule posSort:
     message : "INFO: Position sorting annotated bam"
     input: "all_bam_read_sort/all.read_sort_annotated.bam"
     output: "all_final_bam/final.sort.bam"
     params: sge_opts=config["cluster_settings"]["heavy"]
     shell : "samtools sort -o {output} {input}"

rule annotateBam:
     message : "INFO: Adding query annotations to bam file"
     input:  BAM="all_bam_read_sort/all.read_sort.bam", BIN={SV} , Q={QUERY}, QI={QUERYI}
     output: "all_bam_read_sort/all.read_sort_annotated.bam"
     params: sge_opts=config["cluster_settings"]["light"]
     shell:  "{input.BIN} annotate {input.BAM} {output} {input.Q}"

rule readSort:
     message : "INFO: read sorting bam"
     input:  "all_bam/all.bam"
     output: "all_bam_read_sort/all.read_sort.bam"
     params: sge_opts=config["cluster_settings"]["light"]
     shell:  "samtools sort -n -l 0 -o {output} {input}"

rule samTobam:
     message : "INFO: converting sam to bam"
     input:  SAM="all_sam/all.sam",  T={TARGETI}
     output: temp("all_bam/all.bam")
     params: sge_opts=config["cluster_settings"]["light"]
     shell:  "samtools view -bt {input.T} {input.SAM} > {output}"

rule finalMafToSam:
     message : "INFO: converting maf to sam"
     input : MAF="all_maf/all.maf"
     output: temp("all_sam/all.sam")
     params: sge_opts=config["cluster_settings"]["light"]
     shell:  "maf-convert sam {input.MAF} > {output}"

rule finalAxtToMaf:
     message : "INFO:  coverting axt to maf"
     input:  AX="all_axt/all_filt_no_class.axt", TS="stats/target.sizes", QS="stats/query.sizes"
     output: temp("all_maf/all.maf")
     params: sge_opts=config["cluster_settings"]["light"]
     shell: "axtToMaf {input.AX} {input.TS} {input.QS} {output}"

rule netToAxt:
     message : "INFO: converting net to axt"
     input:  NET="net/all-no-class.net", CHAIN="merged_chains/all.chain.filter.prenet.chain", TA2="2bits/target.2bit", QU2="2bits/query.2bit"
     output: temp("all_axt/all_filt_no_class.axt")
     params: sge_opts=config["cluster_settings"]["light"]
     shell: "netToAxt {input.NET} {input.CHAIN} {input.TA2} {input.QU2} {output}"

rule filtNet:
     message : "INFO: filtering net file"
     input:  "net/all-no-class.net"
     output: "filt_net/all-no-class.filt.net"
     params: sge_opts=config["cluster_settings"]["light"]
     shell:  "netFilter {input} > {output} && netToBed {output} filt_net/all-no-class-filter.bed"

rule net:
     message : "INFO: netting merged chain"
     input:  CHAIN="merged_chains/all.chain.filter.prenet.chain", TS="stats/target.sizes", QS="stats/query.sizes"
     output: "net/all-no-class.net"
     params: sge_opts=config["cluster_settings"]["light"]
     shell:  "chainNet {input.CHAIN}  -minSpace=1 {input.TS} {input.QS}  stdout /dev/null  |  netSyntenic stdin {output}"

rule filter:
     message : "INFO: filtering merged chain"
     input:  CHAINS="chained_psl/chained.chain", TS="stats/target.sizes", QS="stats/query.sizes"
     params: sge_opts=config["cluster_settings"]["light"]
     output: "merged_chains/all.chain.filter.prenet.chain"
     shell:  "chainPreNet {input.CHAINS} {input.TS} {input.QS} {output}"

rule chain   :
     message : "INFO: chaining alignment"
     input   :  PSL="merged_psl/merged.psl", T2BIT="2bits/target.2bit", Q2BIT="2bits/query.2bit"
     output  : temp("chained_psl/chained.chain")
     params  : sge_opts=config["cluster_settings"]["heaviest"]
     shell   : "axtChain -linearGap=medium -psl {input.PSL} {input.T2BIT} {input.Q2BIT} {output}"

rule mergePsl:
     message : "INFO: merging psl"
     input   : expand("raw_psl/{contig}.psl", contig=REGIONS)
     output  : "merged_psl/merged.psl"
     params  : sge_opts=config["cluster_settings"]["light"]
     shell   : "pslCat {input} > {output}"

rule lav_to_psl:
     message   : "INFO: coverting lav to psl"
     input     : "raw_lav/{contig}.lav"
     output    : "raw_psl/{contig}.psl"
     params    :  sge_opts=config["cluster_settings"]["heavy"]
     shell     :  "lavToPsl {input} {output}"

rule runLastZ:
     message : "INFO: running lastz, please wait, it could take a while"
     input   :  T={TARGET}, Q={QUERY}
     output  : "raw_lav/{contig}.lav"
     params  : sge_opts=config["cluster_settings"]["heaviest"]
     shell   :  "{RS_LT} ; {RS_LQ} ; {RS_LTI} ; {RS_LQI} ; {FAIDX} {wildcards.contig} > {TMPDIR}/{wildcards.contig}.fasta ; {LZ} {TMPDIR}/{wildcards.contig}.fasta {LQ} {POST} > {output}"

rule stats:
     message : "INFO: getting target and query stats"
     input:  T={TARGET}, Q={QUERY}
     output: "stats/target.sizes", "stats/query.sizes"
     params: sge_opts=config["cluster_settings"]["light"]
     shell:  "faSize {input.T} -detailed > {output[0]} && faSize {input.Q} -detailed > {output[1]}"

rule twobit:
     message : "INFO: creating 2bit files"
     input:  T={TARGET}, Q={QUERY}
     output: "2bits/target.2bit", "2bits/query.2bit"
     params: sge_opts=config["cluster_settings"]["heavy"]
     shell:  "faToTwoBit {input.T} {output[0]} && faToTwoBit {input.Q} {output[1]}"

rule faIndexT:
     message : "INFO: indexing target"
     input:  T={TARGET}
     output: {TARGETI}
     params: sge_opts=config["cluster_settings"]["heavy"]
     shell:  "samtools faidx {input.T}"

rule faIndexQ:
     message : "INFO: indexing query"
     input:  Q={QUERY}
     output: {QUERYI}
     params: sge_opts=config["cluster_settings"]["heavy"]
     shell:  "samtools faidx {input.Q}"
